# shell comands notes 
bundle // will install all files from gemfile 
rails new app_name // will create new app folder with all setup files 
rails s or server // will run the rails  
rails g or generate model table_name col1:col1_type .....coln:coln_type // will generate table for u 
rails db:migrate // will run the transition and make your queries work 
rails c or console // will open console for you to interact with 
rails db:rollback // will undo the last migrate 
rails db:migrate:redo // will undo the last migrate then do the current one
rails route // check rails route
rails generate migration AddPartNumberToProducts // will generate add_part_number_to_product.rb with empty change method 
rails generate migration AddPartNumberToProducts part_number:string:index // the result is 
class AddPartNumberToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :part_number, :string
    add_index :products, :part_number
  end
end
bin/rails generate migration RemovePartNumberFromProducts part_number:string // result 
class RemovePartNumberFromProducts < ActiveRecord::Migration[7.0]
  def change
    remove_column :products, :part_number, :string
  end
end
bin/rails generate migration AddDetailsToProducts part_number:string price:decimal
class AddDetailsToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :part_number, :string
    add_column :products, :price, :decimal
  end
end
bin/rails generate migration AddUserRefToProducts user:references

class AddUserRefToProducts < ActiveRecord::Migration[7.0]
  def change
    add_reference :products, :user, foreign_key: true
  end
end
bin/rails generate migration CreateJoinTableCustomerProduct customer product
class CreateJoinTableCustomerProduct < ActiveRecord::Migration[7.0]
  def change
    create_join_table :customers, :products do |t|
      # t.index [:customer_id, :product_id]
      # t.index [:product_id, :customer_id]
    end
  end
end
bin/rails db:migrate VERSION=20080906120000
bin/rails db:rollback STEP=3
bin/rails db:migrate:redo STEP=3
bin/rails db:setup
bin/rails db:reset === bin/rails db:drop db:setup 
bin/rails db:migrate:up VERSION=20080906120000 // will check the current version if it is up to date will not do anything
bin/rails db:migrate RAILS_ENV=test // will run it in test enviroment instead of default development enviroment
bin/rails db:migrate VERBOSE=false // will surpress all system messaages in console




# rails console coomands 
User.all // will list all users inside an array 
User.create({col_name: "value",....}) // will insert records inside the table 
User.first // will return the first record 
User.last // will return the last record 
// we can do that 
user = User.create({col_name: "value",....}) 
user.errors // will return any errors existed 

# rails codes 

# add new page 
first go to routes.rb in config folder and add this line 
get "about", to: "about#index" // means when user type homepage/about go to controller/about_controller.rb 
// then use index method. 
// this how about_controller.rb should look like 
class AboutController < ApplicationController
  def index 
  end
end
// the views it gets it will go to views/about/index.html.erb 
root or get "" to: "main#index" // means main is the main or root app page
<%= render partial: "file_path" %> // means render the file and it is partial so its name should
// begin with _file_name
has_secure_password // this method will force model to  use crypto to save password 
validates :email, presence: true, format: {with: 'regular expression', message: 'your messageUser'} // will make sure email should exist 
// another easy way to do it just go to migrates/time_create_users.rb then type , null: false to force email to not has null result 

// here is an example to show how form work 
<h1>Sign Up</h1>
<%= form_with model: @user, url: sign_up_path do |form| %>
<div class="mb-3">
  <%= form.label :email %>
  <%= form.text_field :email, class: "form-control" %>
</div>
<div class="mb-3">
  <%= form.label :password %>
  <%= form.text_field :password, class: "form-control" %>
</div>
<div class="mb-3">
  <%= form.label :password_confirmation %>
  <%= form.text_field :password_confirmation, class: "form-control" %>
</div>
<div class="mb-3">
<%= form.submit "Sign Up", class:"btn btn-primary"%>
</div>
<% end %>
// example to differ between suppress_messages , say, say_with_time 
class CreateProducts < ActiveRecord::Migration[7.0]
  def change
    suppress_messages do
      create_table :products do |t|
        t.string :name
        t.text :description
        t.timestamps
      end
    end

    say "Created a table"

    suppress_messages {add_index :products, :name}
    say "and an index!", true

    say_with_time 'Waiting for a while' do
      sleep 10
      250
    end
  end
end

// Querying database with Active Record 
Book.where("title = ?", params[:title])
Book.order(title: :desc)
Book.limit(10)
Customer.limit(5).offset(30)
User.limit(7).order(created_at: :asc)
Customer.find(10)
customer = Customer.take
Customer.find_by first_name: 'Lifo'
Customer.find_by first_name: 'Jon'
// all methods find , take , first , last can take numerical values 




